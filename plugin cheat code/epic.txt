void Copy(MenuEntry *entry) {
  static const StringVector list = {
    "Copy A To B",
    "Copy B to C",
    "Copy C to D",
    "Copy D to E",
    "Copy B To A",
    "Copy C to B",
    "Copy D to C",
    "Copy E to D"
  };

  const u32 TeamA = 0x8103BEC;
  const u32 TeamB = 0x8103C14;
  const u32 TeamC = 0x8103C3C;
  const u32 TeamD = 0x8103C64;
  const u32 TeamE = 0x8103C8C;
  
  Keyboard keyboard("Select Option:", list);
  int userChoice = keyboard.Open();
//you could use a switch case here too, though this works aswell
  if(userChoice == -1)
    return;
  
  if(userChoice == 0) { //first choice
    for(int i = 0; i < 10; i++) { //10 times 0x4 is 0x28. that is the lenght of bytes you want to copy
      Process::Write32(TeamA, *(u32 *)(TeamB + (i * 0x4)));
    }
    OSD::Notify("Successfully copied!");
  } 

  if(userChoice == 1) { //second choice
    for(int i = 0; i < 10; i++) { //10 times 0x4 is 0x28. that is the lenght of bytes you want to copy
      Process::Write32(TeamB, *(u32 *)(TeamC + (i * 0x4)));
    }
    OSD::Notify("Successfully copied!");
  }

  if(userChoice == 2) { //third choice
    for(int i = 0; i < 10; i++) { //10 times 0x4 is 0x28. that is the lenght of bytes you want to copy
      Process::Write32(TeamC, *(u32 *)(TeamD + (i * 0x4)));
    }
    OSD::Notify("Successfully copied!");
  }

  if(userChoice == 3) { //fourth choice
    for(int i = 0; i < 10; i++) { //10 times 0x4 is 0x28. that is the lenght of bytes you want to copy
      Process::Write32(TeamD, *(u32 *)(TeamE + (i * 0x4)));
    }
    OSD::Notify("Successfully copied!");
  }

  if(userChoice == 3) { //fifth choice
    for(int i = 0; i < 10; i++) { //10 times 0x4 is 0x28. that is the lenght of bytes you want to copy
      Process::Write32(TeamB, *(u32 *)(TeamA + (i * 0x4)));
    }
    OSD::Notify("Successfully copied!");
  }

  if(userChoice == 3) { //sixth choice
    for(int i = 0; i < 10; i++) { //10 times 0x4 is 0x28. that is the lenght of bytes you want to copy
      Process::Write32(TeamC, *(u32 *)(TeamB + (i * 0x4)));
    }
    OSD::Notify("Successfully copied!");
  }

  if(userChoice == 3) { //seventh choice
    for(int i = 0; i < 10; i++) { //10 times 0x4 is 0x28. that is the lenght of bytes you want to copy
      Process::Write32(TeamD, *(u32 *)(TeamC + (i * 0x4)));
    }
    OSD::Notify("Successfully copied!");
  }

  if(userChoice == 3) { //eighth choice
    for(int i = 0; i < 10; i++) { //10 times 0x4 is 0x28. that is the lenght of bytes you want to copy
      Process::Write32(TeamE, *(u32 *)(TeamD + (i * 0x4)));
    }
    OSD::Notify("Successfully copied!");
  }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void BackupOptions(MenuEntry *entry) {
  static const std::vector<std::string> list = {
    "Back up team A", //0x8103BEC
    "Back up team B", //0x8103C14
    "Back up team C", //0x8103C3C
    "Back up team D", //0x8103C64
    "Back up team E", //0x8103C8C
  };

  static const std::vector<std::string> teams = {
    "A", "B", "C", "D", "E"
  }; 

  static const u32 TeamAddress[5] = {
    0x8103BEC, 0x8103C14, 0x8103C3C, 0x8103C64, 0x8103C8C
  };  

  std::vector<u32> TeamData; //Used to store the data into the vector first
  Directory folder;
  std::vector<std::string> files;
  File *file = new File();

  Keyboard keyboard("Select Option:", list);
  int userChoice = keyboard.Open();
//you could use a switch case here too, though this works aswell
  if(userChoice == -1)
    return;

//Copies selected team to vector
  for(int i = 0; i < 10; i++) {
    TeamData.push_back(TeamAddress[userChoice]);
  }
//If teamdata vector is somehow empty return
  if(TeamData.empty()) { 
    return; 
  }

  Directory::Open(folder, "Teams", Directory::IsExists("Teams") == 0);

  int count;
  count = folder.ListFiles(files);
//If File doesn't exist create the file
  if(File::Exists("Teams/Team" << teams[userChoice] << std::to_string(count) << ".bin") == 0) 
    File::Create("Teams/Team" << teams[userChoice] << std::to_string(count) << ".bin");
            
  File::Open(*file, "Teams/Team" << teams[userChoice] << std::to_string(count) << ".bin", File::Mode::WRITE);
  file->Flush();
  for(int i = 0; i < 10; i++) {
    file->Write(&TeamData.at(i), 4);
  }
  file->Close();
  OSD::Notify("Saved as Team" << teams[userChoice] << std::to_string(count) << ".bin");
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void RestoreOptions(MenuEntry *entry) {
  static const std::vector<std::string> list = {
    "Restore team A", //0x8103BEC
    "Restore team B", //0x8103C14
    "Restore team C", //0x8103C3C
    "Restore team D", //0x8103C64
    "Restore team E", //0x8103C8C
  };

  static const u32 TeamAddress[5] = {
    0x8103BEC, 0x8103C14, 0x8103C3C, 0x8103C64, 0x8103C8C
  };  

  std::vector<std::string> files;
  File *file = new File();
  std::vector<u32> TeamData;
  Directory folder;
  u32 Team;
  int index;
  Keyboard OP;

  Keyboard keyboard("Select Option:", list);
  int userChoice = keyboard.Open();

  if(userChoice == -1)
    return;

  files.clear();
  TeamData.clear();
//If Directory doesn't exist create it and open it
  Directory::Open(folder, "Teams", Directory::IsExists("Teams") == 0);
//If there are files in the folder populate them    
  if(folder.ListFiles(files) > 0) {
    OP.Populate(files);
    index = OP.Open();
    if(index != -1) {
      File::Open(*file, "Teams" << files.at(index), File::Mode::READ);
      for(int i = 0; i < 10; i++) {
        file->Read(&Team, 4);
        TeamData.push_back(Team & 0xFFFFFFFF);
        Process::Write32(TeamAddress[userChoice], TeamData.at(i));
      }
        
      file->Close();
      OSD::Notify(files.at(index) << " loaded!");
    }
  }
  else 
    OSD::Notify("No files found.");
        
  folder.Close();
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void SpeedUp(MenuEntry* entry) {
  if(!Controller::IsKeysPressed(entry->Hotkeys[0].GetKeys()))
    return;

  switch(*(u8 *)0x8131FFC) {
    case 6: {
      Process::Write8(0x81316D4, 0);
      OSD::Notify(Color::White << "Speed Up " << Color::Red << "Disabled!");
    } break;
    default: {
      Process::Write32(0x8105D4C, 0x64);
      Process::Write8(0x81316D4, 0x1);
      OSD::Notify(Color::White << "Speed Up " << Color::Green << "Enabled!");
    } break;
  }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void TreasureRadar(MenuEntry* entry) {
  if(!Controller::IsKeysPressed(entry->Hotkeys[0].GetKeys()))
    return;

  switch(*(u8 *)0x8131FFC) {
    case 6: {
      Process::Write8(0x81316D5, 0);
      OSD::Notify(Color::White << "Treasure Radar " << Color::Red << "Disabled!");
    } break;
    default: {
      Process::Write32(0x8105D50, 0x64);
      Process::Write8(0x81316D5, 0x1);
      OSD::Notify(Color::White << "Treasure Radar " << Color::Green << "Enabled!");
    } break;
  }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void RichCat(MenuEntry* entry) {
  if(!Controller::IsKeysPressed(entry->Hotkeys[0].GetKeys()))
    return;

  switch(*(u8 *)0x8131FFC) {
    case 6: {
      Process::Write8(0x81316D6, 0);
      OSD::Notify(Color::White << "Rich Cat " << Color::Red << "Disabled!");
    } break;
    default: {
      Process::Write32(0x8105D54, 0x64);
      Process::Write8(0x81316D6, 0x1);
      OSD::Notify(Color::White << "Rich Cat " << Color::Green << "Enabled!");
    } break;
  }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void CatCPU(MenuEntry* entry) {
  if(!Controller::IsKeysPressed(entry->Hotkeys[0].GetKeys()))
    return;

  switch(*(u8 *)0x8131FFC) {
    case 6: {
      Process::Write8(0x81316D7, 0);
      OSD::Notify(Color::White << "Cat CPU " << Color::Red << "Disabled!");
    } break;
    default: {
      Process::Write32(0x8105D58, 0x64);
      Process::Write8(0x81316D7, 0x1);
      OSD::Notify(Color::White << "Cat CPU " << Color::Green << "Enabled!");
    } break;
  }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void CatJobs(MenuEntry* entry) {
  if(!Controller::IsKeysPressed(entry->Hotkeys[0].GetKeys()))
    return;

  switch(*(u8 *)0x8131FFC) {
    case 6: {
      Process::Write8(0x8105D5C, 0);
      OSD::Notify(Color::White << "Cat Jobs " << Color::Red << "Disabled!");
    } break;
    default: {
      Process::Write32(0x8105D5C, 0x64);
      Process::Write8(0x81316D8, 0x1);
      OSD::Notify(Color::White << "Cat Jobs " << Color::Green << "Enabled!");
    } break;
  }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void SnipertheCat(MenuEntry* entry) {
  if(!Controller::IsKeysPressed(entry->Hotkeys[0].GetKeys()))
    return;

  switch(*(u8 *)0x8131FFC) {
    case 6: {
      Process::Write8(0x8105D60, 0);
      OSD::Notify(Color::White << "Sniper The Cat " << Color::Red << "Disabled!");
    } break;
    default: {
      Process::Write32(0x8105D60, 0x64);
      Process::Write8(0x81316D9, 0x1);
      OSD::Notify(Color::White << "Sniper The Cat " << Color::Green << "Enabled!");
    } break;
  }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void NoSelectPausing(MenuEntry* entry) {
  if(*(u32 *)0x813202C == 0x3C0) {
    if(!Controller::IsKeyPressed(Key::Start)) //if button is not pressed return aka do nothing
      return;
  
    switch(*(u8 *)0x81309A0) { //switch through the values
      case 0: { //If the value is 0 do this
        Process::Write8(0x81309A0, 0x10);
      } break;
      default: { //If it is anything else than 0
        Process::Write8(0x81309A0, 0);
      } break;
    }
  }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void InfiniteEnergy(MenuEntry* entry) {
      Process::Write32(0x8103B90, 0xFFFFFFF);
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void CatsInstantRecharge(MenuEntry* entry) {
  for(int i = 0; i < 9; i++) {
    Process::Write32(0x813180C + (i * 0x4), 0);
  }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void MaxBattleMoney(MenuEntry* entry) {
      Process::Write32(0x8109624, 0xFFFFFFF)
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void CannonAlwaysFull(MenuEntry* entry) {
      Process::Write32(0x810992C, 0)
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void InvincibleCatBase(MenuEntry* entry) {
      Process::Write32(0x810991C, 0x10D88)
    OSD::Notify("You are now invincible!");
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void SpecialCoordinateGuy(MenuEntry *entry) {
  if(*(u8 *)0x8131FFC != 6) {
    if(*(u8 *)0x8109A10 != 0) {
      Process::Write32(0x8109A2C, 0x800)
    OSD::Notify("*teleports behind you*");
    }
  } 
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void EnemyBaseOneHealth(MenuEntry *entry) {
if(*(u8 *)0x8131FFC != 6)
      Process::Write32(0x810D348, 0x1)
    OSD::Notify("haha base health go brrr");
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void UnitEditor(MenuEntry *entry) {
u8 value = 0;
Keyboard KB("Enter Unit ID: ");
int op = KB.Open(value);
if(op == -1)
  return;

Process::Write32(0x8103BEC, value);

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void InfiniteXP(MenuEntry* entry) {
      Process::Write32(0x8103B88, 0xFFFFFFF)
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void InfiniteCatFood(MenuEntry* entry) {
      Process::Write32(0x8103B80, 0xFFFFFFF)
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void InfiniteGoldTickets(MenuEntry* entry) {
      Process::Write32(0x81332C4, 0xFFFFFFF)
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    static bool     DisplayWelcomeBox(void)
    {
        return !File::Exists("Battle-Cats-Message");
    }

    static void     WelcomeBoxHasBeenSeen(void)
    {
        File::Create("Battle-Cats-Message");
    }

    static bool 	IsGameVersionSupported(void)
    {

        const u64 USA = 0x000400000018BC00;
        
        //If Title-ID is USA run the menu
        if(Process::GetTitleID() == 0x000400000018BC00) 
            return true;

        return false;
    }

    int main(void)
    {
        // Exit the plugin if the game is not supported
        if (!IsGameVersionSupported())
        {
            MessageBox << ("Bruh... this isn't The Battle Cats POP! USA")();
            return -1;
        }

        // Display welcomBox if necessary
        if (DisplayWelcomeBox())
        {
            MessageBox << ("Plugin By FooFooTheGuy")();
            WelcomeBoxHasBeenSeen();
        }
        
        PluginMenu *menu = new PluginMenu("Plugin By FooFooTheGuy. Huge Thanks to RedShyGuy For Doing Like Half the Work LOL");
        
        menu->SynchronizeWithFrame(true);
        //menu->Callback(DevCallback);
        InitEntrys(*menu);

        // Run the menu
        menu->Run();
        return 0;
    }